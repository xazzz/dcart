System Design
==============

I want to write a better app framework, and from this framework, we can extend it easily.

The idea is inspired from Unix-alike operationg system especially OSX.
To build a extensible web app framework, all components should be extensible.

The whole system should be built on app/module
To treat app/module as a type of <Process>.
Each <Process> is consist of <Command> and <Service>.
<Command> is similar to the idea of console app or desktop app,
<Service> is similar to the idea of service..

Each <Process> will have its own zone : including storage & data source

Features :

    Install & Uninstall : will be installed and uninstalled cleanly from storage system

        copy and paste to the file system, and it's belong to different space

            system : system app collection
            user : user app collection
            vendor : vendor app collection

        the installer of <Process> will be called when its installed
        the uninstaller of <Process> will be called when its uninstalled
        the app list will be built and updated

        the app list could be saved in a data center, for example :

            database == application ==
                Id
                UUID : com.domain.user <simlar to the provision in iOS>
                GUID : ?? global name of the app
                name
                author
                developer ID
                version
                md5 (of app zip bundle)
                date

            the core database will not rely on database server
            so the core database is portable

    Update it : will be updated if the new <Process> is updated from some source

        get info from the app store, and check its version & md5 (of zip file)
        download it to temperory installation folder

        code is identified by GUID : com.domain.xxxx ==> that's the global name
        code is signed with certificate :

        remove code part of the app ==> *.phar? or *.php?
        retain the system supply folder ==> /Document /Temp /Library
        retain the data in /Document or clean it <decided by new Process> ==>
        remove it from tempeory installation folder

    Bundle is a container : all resource will be in one container

        will add all resources in app folder
        will be static files only
        will have container ID

    Extend it :

        replace Command : re-write and update it
        replace Service : re-write and update it

        Command :

            hide/remove Class
            replace Class

            hide/remove method
            replace method
            inject into method
            add method to it

            chain to injected object

        Service :

            hide/remove Class
            replace Class

            hide/remove method
            replace method
            inject into method
            add method to it

            chain to injected object

    Communication :

        Command :

            router : user | Command | Service

                router is HTTP/METHOD based block
                router could return Web page for users
                router could return binary-json for Command | Service

            queue : Command | Service

                action queue : one action could be injected into Command | Service
                message queue : one message could be broadcast to all in queue

        Service :

            router : Command | Service
            queue : Command | Service


Why & Purpose

    Why extensible? Think about all these good open source system...
    If you want some code to inject into the workflow...

    workflow ==

        action A ==> action B ==> action C ==> ...
        data A ==> data B ==> no data ==> ....

        it will be action chain
        it will be data changes chain

    The web app is consisted of workflow, one or many...
    The e-commercial software has clear workflow...

    Extensible, means every part of workflow is extensible..
    Extensible, means every addon will not break other addon..

    Replace | Extend <Add | Remove> | Coordinate <No chaos>
    Notify extension about changes, so it will tell support or not...

    Extension A ==> Replaced Function B
    Extension B ==> Rely on Function B

    Extension B ==> get notified <== Function B replaced



=========================== e-commercial web app workflow =================================

OPEN API
=========

The api system is core system of the e-commerce software I think, yes some of them provide extension, or else, but it's not good enough, if you want to use the core system functionality, they still have to change it! Even worse, the open-cart system, they use vqMOD to replace the code!! Thus one extension could break another one...

The OPEN API, is not all about self-contained MVC code, also the hook APi in the system, wordpress is an good example, even it's not intended to do so, but it's doing it this way.

HOOK API == WORKFLOW
=====================

To make hook API, we will need more better way to understand the workflow of the system, and from each of them, the extension can hook their API in it, the API should be chained together, so any input parameter is same, and they have to output the same exact format too. Let's see order part.


    In shopping cart

        - before
        - in_the_middle_of
        - after

    Order : Confirm

        - before
        - in_the_middle_of
        - after

    Order :



HOOK API == LOAD & UNLOAD
==========================

To make hook API flexible, we should move all tightly related code (could be disabled possibly) to outside of the core system. For example, if you want to replaced the whole order confirm system, you should be able to do it, coz the order confirm system is an extension.

    - core/
        - model
        - admin
            - controller
            - helper
            - view

    - extension/
        - system
            - payment
            - order
            - cart
            ......
        - user
            - folder A // created by admin
            - folder B
            ......

        - vendor
            - folder A // created by admin
            - folder B
            ......

    - template/
        - system
            - themeA
            - themeB
            - themeC

        - user
            - themeA
            - themeB
            - themeC

        - vendor
            - themeA
            - themeB
            ....

    - public
        - system
        - user
        - vendor
        - assert
            - css
            - script
        - cache
        - upload
            -

        index.php
        config.php

    system_unload_extension
    system_load_extension

HOOK API == HOW TO HOOK
==========================

To make hook API flexible, we should move all tightly related code (could be disabled possibly) to outside of the core system. For example, if you want to replaced the whole order confirm system, you should be able to do it, coz the order confirm system is an extension.

    Register to the system

        extension_domain : my_extension
        entry_point : class::function::($app);

        put them into ==> queue ==> sqlite db / mysql

    Load extension

        foreach ($queue_extension as $name => $extension) {

        }

    Hook

        @question : if there are two actions conflict exist, user should unload one of them
        @question : for example, two email template system // will send two email if they both installed

        // every extension should open its HOOK too...
        // every extension has its HOOK queue
        // every extension should open it to other developer

        foreach ($queue_extension as $name => $extension) {

            - A ==> action ==> A.queue_extension ==>
            - B ==> action ==> B.queue_extension ==>
            - C ==> action ==> C.queue_extension ==>

        }

        if (system_extension_exist ($domain, $version) {

            if (false != ($queue = system_get_queue_from_extension ($domain, $version))) {

                $queue->add ();

            }
        }

    Unload & Load dynamically

        system_load_extension
        system_unload_extension

        foreach ($queue_extension as $name => $extension) {

            - A ==> action ==> system_unload_extension
            - B ==> action
            - C ==> action

        }

     Asynchronous task

        //http://www.davenewson.com/dev/methods-for-asynchronous-processes-in-php

        if one extension want to be an asynchronous task, then we will do this

        ob_end_clean();
        header("Connection: close");
        ignore_user_abort(true);

        echo ('Text the user will see');

        $size = ob_get_length();
        header("Content-Length: $size");
        ob_end_flush();                   // Strange behavior; this will not work unless..
        flush();                          // both functions are called !

        // Do processing here

        bottom-half.php

            sleep(30);
            //echo('Text user will never see');
            //run task

            foreach ($queue_async_task as $name => $task) {

                // run task here

            }

    Transaction

        if one extension require transaction, we will use an database table for that
        unless the transaction is complete, otherwise it will be roll-back

        // how to?

    Resource

        // we have to use lock to this critic resource...
        // Semaphore, Shared Memory and IPC



HOOK API == DATA EXTENSION
===========================

To make hook API complete, we should enable adding extra data type into the db system. Even we can make a simply almost complete database system for e-commerce business, but we can't make sure it can suit for every requirement. So when user want to add extra data column to the current database table? We will make that happen too.

    order
        order_id
        ......

    order meta

        order_meta_id
        order_id
        domain : extension domain
        type : string, integer....
        name : display name
        value :
        ....

    SELECT o.* FROM order AS o INNER JOIN order_meta AS om ON o.order_id=order_meta.order_id WHERE domain='my_domain';
    or better two SQL ==> one for each ==>

Thinking
===========

Sometimes you will have to think about an web application as an operating system, and this time you will think about how to schedule the task and also how to run signal, as well you will deal with resource lock sometimes.

If we think about the web application as an operating system, you will have the core scheduler, and it will run task based on its ticket, normally that's not a problem, coz all task will be running inside the operating system.

For some part of the system, we will take them as process or task, we will deal with them in different queue, and in each of them, they will be scheduled and run sometime, basically it's a FIFO, sometimes you can add more factors.

The resource could be required and the competition happened sometimes, so you will have to use IPC or something similar.

Web app
========

    Task ==> from each user call ==> open URL
    Task ==> service ==> internal system
    Signal ==> called in task scheduler bottom half ==>

    System call ==>
    Interrupt ==>
    Exception ==>

System
==========

About the system file structure, I think the problem is all we want to be a flexible and loose connected system, but theme seems always connect one to another. We can make different extension, and for some of them, we will provide their controller & view system, also routers, so from these facilities, you can put them into any part of the web page framework.

This time, how do you deal with that one web page framework could include many extension views, and for each of them, how to connect them together, but still keep it's clean and simple.

Lets start it from admin portal, the core system is all about service & helper and so on. There is no any specific theme in it, so no web page framework. Still we will have to define an web page framework for it, and this one will include many extensions. And for each extension, we will actually designed it to be an part of the functionality of the web page framework, and it have to provide web UI of it.

Admin extension
===============

Queue
    type
    queue

Navigation
    type


Navigation ==> Container ==> Menu system
Menu system ==> Menu Item container ==> Menu items ==> Menu item ==> Sub menu item container ==> Extension

Menu Item container ==>
    Item
    Item
    Item

Item ==> one or more web pages in one system
Item ==> extension A :: route A
Item ==> extension B :: route B

foreach (menu_system_array as $name => $menu) {

    if (is_array ($menu)) {

        // $name ==>
    }

}

Level = 0, 1, ....
name = _t()......
link = ......
container = ...... = system | user | vendor + extension name
id = system | user | vendor + extension name
sort_order = 0, 1, ....
type = divider | container | single item


   - core/
        - model
        - helper

    - extension/
        - system
            - admin
                - basic module for administration theme framework
                - from this module we will create administration theme
                - and we will have - extension - role - user - customer - merchant

            - user
                - route
                - controller
                - view

                - authenticate user
                - authorize user
                - roles
                - permission

            - customer

            - merchant
            - payment
            - order
            - cart

        - user
            - folder A // created by admin
            - folder B
            ......

        - vendor
            - folder A // created by admin
            - folder B
            ......

    - template/
        - system
            - themeA
            - themeB
            - themeC

        - user
            - themeA
            - themeB
            - themeC

        - vendor
            - themeA
            - themeB
            ....

    - public
        - system
        - user
        - vendor
        - assert
            - css
            - script
        - cache
        - upload
            -

        index.php
        config.php

